"""API —Ç–µ—Å—Ç—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞"""
from config.environment import EnvironmentConfig
from config.test_data import TestData
import allure


class TestKinopoiskAPI:
    """–í—Å–µ API —Ç–µ—Å—Ç—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞"""

    @allure.step("–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ 'Ocean's Thirteen' –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
    def test_search_oceans_thirteen(self, api_client):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ 'Ocean's Thirteen' –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        print("\nüîç API –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")

        params = {
            'keyword': TestData.API.SEARCH_KEYWORD,
            'page': 1
        }

        response = api_client.get(
            EnvironmentConfig.SEARCH_BY_KEYWORD_URL,
            params=params
        )

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        assert response.status_code == 200
        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        assert data['keyword'] == TestData.API.SEARCH_KEYWORD
        assert data['pagesCount'] == 0
        assert isinstance(data['films'], list)
        assert len(data['films']) > 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        film = data['films'][0]
        film_data = TestData.API.SEARCH_FILM_DATA

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π —Ñ–∏–ª—å–º–∞
        assert film['filmId'] == film_data['filmId']
        assert film['nameRu'] == film_data['nameRu']
        assert film['nameEn'] == film_data['nameEn']
        assert film['type'] == film_data['type']
        assert film['year'] == film_data['year']
        assert film['filmLength'] == film_data['filmLength']
        assert film['rating'] == film_data['rating']
        assert film['ratingVoteCount'] == film_data['ratingVoteCount']

        print("‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    @allure.step("–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –ø–æ ID")
    def test_get_film_by_id(self, api_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –ø–æ ID"""
        print("\nüé¨ API –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞ –ø–æ ID")

        film_id = TestData.API.SEARCH_FILM_ID

        response = api_client.get(
            f"{EnvironmentConfig.FILM_DETAILS_URL}/{film_id}"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        assert response.status_code == 200

        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        assert data['kinopoiskId'] == film_id
        assert data['nameRu'] == TestData.API.SEARCH_FILM_DATA['nameRu']
        assert data['nameOriginal'] == TestData.API.SEARCH_FILM_DATA['nameEn']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        assert data['ratingKinopoisk'] == float(
            TestData.API.SEARCH_FILM_DATA['rating'])
        assert (
            data['ratingKinopoiskVoteCount'] ==
            TestData.API.SEARCH_FILM_DATA['ratingVoteCount']
        )

        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –ø–æ ID –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    @allure.step("–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    def test_films_with_filters(self, api_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        print("\nüéØ API –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")

        params = TestData.API.FILTERS_DATA

        response = api_client.get(
            EnvironmentConfig.FILMS_WITH_FILTERS_URL,
            params=params
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        assert response.status_code == 200

        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        assert 'total' in data
        assert 'totalPages' in data
        assert 'items' in data

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        assert data['total'] == 100
        assert data['totalPages'] == 5
        assert isinstance(data['items'], list)
        assert len(data['items']) >= 10

        print("‚úÖ –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    @allure.step("–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º—å–µ—Ä –∑–∞ —è–Ω–≤–∞—Ä—å 2025")
    def test_premieres_january_2025(self, api_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º—å–µ—Ä –∑–∞ —è–Ω–≤–∞—Ä—å 2025"""
        print("\nüìÖ API –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–º—å–µ—Ä")

        params = TestData.API.PREMIERES_DATA

        response = api_client.get(
            EnvironmentConfig.PREMIERES_URL,
            params=params
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        assert response.status_code == 200

        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        assert 'total' in data
        assert 'items' in data

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        assert data['total'] == TestData.API.PREMIERES_DATA['expected_total']
        assert isinstance(data['items'], list)
        assert len(data['items']) > 0

        print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–º—å–µ—Ä–∞—Ö –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    @allure.step("–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ä–µ–º–æ—á–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ ID —Ñ–∏–ª—å–º–∞")
    def test_get_staff_by_film_id(self, api_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ä–µ–º–æ—á–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ ID —Ñ–∏–ª—å–º–∞"""
        print("\nüë• API –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ä–µ–º–æ—á–Ω–æ–π –≥—Ä—É–ø–ø—ã")

        film_id = TestData.API.STAFF_DATA['film_id']

        response = api_client.get(
            f"{EnvironmentConfig.STAFF_URL}?filmId={film_id}"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        assert response.status_code == 200

        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        assert isinstance(data, list)
        assert len(data) > 0

        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å—ä–µ–º–æ—á–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
